(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.React = {}));
})(this, (function (exports) { 'use strict';

    const currentDispatcher = {
        current: null
    };
    const resolveDispatcher = () => {
        const dispatcher = currentDispatcher.current;
        if (dispatcher === null) {
            throw new Error('hook只能在函数组件中执行');
        }
        return dispatcher;
    };

    const supportSymbol = typeof Symbol === 'function' && Symbol.for; //判断宿主环境是否支持Symbol
    const REACT_ELEMENT_TYPE = supportSymbol
        ? Symbol.for('react.element')
        : 0xeac7; //react元素类型

    const ReactElement = function (type, key, ref, props) {
        const element = {
            $$typeof: REACT_ELEMENT_TYPE,
            type,
            key,
            ref,
            props,
            __mark: 'mgaw' //添加标识
        };
        return element;
    };
    const jsx = (type, config, ...maybeChildren) => {
        let key = null;
        const props = {};
        let ref = null;
        for (const prop in config) {
            const val = config[prop];
            if (prop === 'key') {
                if (val !== undefined)
                    key = '' + val;
                continue;
            }
            if (prop === 'ref') {
                if (val !== undefined)
                    ref = '' + val;
                continue;
            }
            if ({}.hasOwnProperty.call(config, prop)) { //自己身上的而非原型上的
                props[prop] = val;
            }
        }
        const maybeChildrenLength = maybeChildren.length;
        if (maybeChildrenLength) {
            if (maybeChildrenLength === 1) {
                props.children = maybeChildren[0];
            }
            else {
                props.children = maybeChildren;
            }
        }
        return ReactElement(type, key, ref, props);
    };
    const createElement = jsx;
    const jsxDEV = (type, config) => {
        let key = null;
        const props = {};
        let ref = null;
        for (const prop in config) {
            const val = config[prop];
            if (prop === 'key') {
                if (val !== undefined)
                    key = '' + val;
                continue;
            }
            if (prop === 'ref') {
                if (val !== undefined)
                    ref = '' + val;
                continue;
            }
            if ({}.hasOwnProperty.call(config, prop)) { //自己身上的而非原型上的
                props[prop] = val;
            }
        }
        return ReactElement(type, key, ref, props);
    };

    const version = '0.0.0';
    const useState = (initialState) => {
        const dispatcher = resolveDispatcher();
        return dispatcher.useState(initialState);
    };
    //内部数据共享层
    const __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = {
        currentDispatcher
    };

    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    exports.createElement = createElement;
    exports.jsxDEV = jsxDEV;
    exports.useState = useState;
    exports.version = version;

}));
