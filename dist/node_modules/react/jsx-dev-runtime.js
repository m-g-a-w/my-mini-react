(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global["jsx-dev-runtime"] = {}));
})(this, (function (exports) { 'use strict';

    const supportSymbol = typeof Symbol === 'function' && Symbol.for; //判断宿主环境是否支持Symbol
    const REACT_ELEMENT_TYPE = supportSymbol
        ? Symbol.for('react.element')
        : 0xeac7; //react元素类型
    const REACT_FRAGMENT_TYPE = supportSymbol
        ? Symbol.for('react.fragment')
        : 0xeacb; //react片段类型

    const ReactElement = function (type, key, ref, props) {
        const element = {
            $$typeof: REACT_ELEMENT_TYPE,
            type,
            key,
            ref,
            props,
            __mark: 'mgaw' //添加标识
        };
        return element;
    };
    const isValidElement = (object) => {
        return (typeof object === 'object' &&
            object !== null &&
            object.$$typeof === REACT_ELEMENT_TYPE);
    };
    const jsx = (type, config, ...maybeChildren) => {
        let key = null;
        const props = {};
        let ref = null;
        for (const prop in config) {
            const val = config[prop];
            if (prop === 'key') {
                if (val !== undefined)
                    key = '' + val;
                continue;
            }
            if (prop === 'ref') {
                if (val !== undefined)
                    ref = val;
                continue;
            }
            if ({}.hasOwnProperty.call(config, prop)) { //自己身上的而非原型上的
                props[prop] = val;
            }
        }
        const maybeChildrenLength = maybeChildren.length;
        if (maybeChildrenLength) {
            if (maybeChildrenLength === 1) {
                props.children = maybeChildren[0];
            }
            else {
                props.children = maybeChildren;
            }
        }
        return ReactElement(type, key, ref, props);
    };
    const createElement = jsx;
    const jsxDEV = (type, config, ...maybeChildren) => {
        let key = null;
        const props = {};
        let ref = null;
        for (const prop in config) {
            const val = config[prop];
            if (prop === 'key') {
                if (val !== undefined)
                    key = '' + val;
                continue;
            }
            if (prop === 'ref') {
                if (val !== undefined)
                    ref = val;
                continue;
            }
            if ({}.hasOwnProperty.call(config, prop)) { //自己身上的而非原型上的
                props[prop] = val;
            }
        }
        const maybeChildrenLength = maybeChildren.length;
        if (maybeChildrenLength) {
            if (maybeChildrenLength === 1) {
                props.children = maybeChildren[0];
            }
            else {
                props.children = maybeChildren;
            }
        }
        return ReactElement(type, key, ref, props);
    };
    const Fragment = REACT_FRAGMENT_TYPE;
    // Vite 需要 jsxs 导出
    const jsxs = jsx;

    exports.Fragment = Fragment;
    exports.createElement = createElement;
    exports.isValidElement = isValidElement;
    exports.jsx = jsx;
    exports.jsxDEV = jsxDEV;
    exports.jsxs = jsxs;

}));
